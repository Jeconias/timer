{"mappings":"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","sources":["js/constants.js","js/helpers.js","js/timer.js"],"sourcesContent":["export const SECOND = 1000;\nexport const MINUTE = 60 * SECOND;\n\nexport const DEFAULT_TIMERS = [\n  15 * SECOND,\n  30 * SECOND,\n  MINUTE,\n  5 * MINUTE,\n  10 * MINUTE,\n  15 * MINUTE,\n  20 * MINUTE,\n  30 * MINUTE,\n  45 * MINUTE,\n  60 * MINUTE,\n];\n\nexport const CUSTOM_EVENTS = {\n  START_TIMER: 'startTimer',\n  STOP_TIMER: 'click',\n};\n\nexport const TIME_PROPERTY = 'data-time';\n\nexport const CURRENT_TIME_PROPERTY = 'data-current-time';\n\nexport const INTERVAL_ID_PROPERTY = 'data-intervalid';\n","export const getDarkColor = () => {\n  let color = '#';\n  for (let i = 0; i < 3; i++)\n    color += (\n      '0' + Math.floor((Math.random() * Math.pow(16, 2)) / 2).toString(16)\n    ).slice(-2);\n  return color;\n};\n","import {\n  SECOND,\n  CURRENT_TIME_PROPERTY,\n  DEFAULT_TIMERS,\n  CUSTOM_EVENTS,\n  INTERVAL_ID_PROPERTY,\n  TIME_PROPERTY,\n} from './constants';\nimport { getDarkColor } from './helpers';\n\nconst getDateInstance = () => {\n  const d = new Date(2014, 10, 10);\n  const timezoneOffset = d.getTimezoneOffset() * 60000;\n  return new Date(d.getTime() - timezoneOffset);\n};\n\n/**\n *\n * @param {number} time\n */\nconst getTime = (time) => {\n  const d = getDateInstance();\n  d.setMilliseconds(time);\n\n  const isoStringTimer = d.toISOString();\n  const [_, year, month, day, hour, minute, second] = isoStringTimer.match(\n    /(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})/\n  );\n\n  return { year, month, day, hour, minute, second };\n};\n\n/**\n *\n * @param {number} intervalId\n * @param {HTMLElement} el\n */\nconst clear = (intervalId, el) => {\n  let id = intervalId;\n  if (typeof intervalId === 'string') {\n    id = parseInt(intervalId);\n  }\n\n  clearInterval(id);\n\n  if (el) {\n    el.removeAttribute(INTERVAL_ID_PROPERTY);\n  }\n};\n\n/**\n *\n * @param {{timer: number}} detail\n * @returns\n */\nconst newEventStartTimer = (detail) =>\n  new CustomEvent(CUSTOM_EVENTS.START_TIMER, {\n    detail,\n  });\n\n/**\n *\n * @param {number} time\n * @param {HTMLElement} target\n * @param {boolean} skipSetTime\n */\nconst startTimer = (time, target, skipSetTime) => {\n  if (!skipSetTime) target.setAttribute(TIME_PROPERTY, time);\n\n  const base = getDateInstance().getTime();\n  const d = getDateInstance();\n  d.setMilliseconds(time);\n\n  let id;\n  id = setInterval(() => {\n    const newTime = d.getTime() - SECOND;\n    d.setTime(newTime);\n\n    const { hour, minute, second } = getTime(newTime);\n\n    target.innerHTML = `${hour}:${minute}:${second}`;\n    target.setAttribute(INTERVAL_ID_PROPERTY, id);\n    target.setAttribute(CURRENT_TIME_PROPERTY, newTime - base);\n\n    if (newTime < base) {\n      clear(id, target);\n      target.innerHTML = '00:00:00';\n      target.removeAttribute(CURRENT_TIME_PROPERTY);\n    }\n  }, SECOND);\n};\n\n/**\n *\n * @param {CustomEvent<{timer: number, intervalId: number}>} event\n * @this { HTMLSpanElement }\n */\nconst handleStartTimer = function (event) {\n  const el = this;\n  const timeFromEl = event.detail?.timer;\n\n  if (event.detail?.intervalId) {\n    clear(event.detail.intervalId, el);\n  }\n\n  startTimer(timeFromEl, el);\n};\n\n/**\n *\n * @param {CustomEvent<{intervalId: number}>} event\n * @this { HTMLSpanElement }\n */\nconst handleStopTimer = function () {\n  const el = this;\n  const intervalIdFromEl = el.getAttribute(INTERVAL_ID_PROPERTY);\n\n  if (intervalIdFromEl) {\n    clear(intervalIdFromEl, el);\n  } else {\n    const currentTime = parseInt(el.getAttribute(CURRENT_TIME_PROPERTY));\n    if (isNaN(currentTime)) return;\n\n    startTimer(currentTime, el, true);\n  }\n};\n\n/**\n *\n * @param {MutationRecord[]} mutations\n */\nconst onTimerChange = (mutations) => {\n  const backgroundTimer = document.getElementById('background-timer');\n\n  const timeNode = mutations?.find(\n    (m) => m.attributeName === CURRENT_TIME_PROPERTY\n  );\n  const target = timeNode?.target;\n\n  const currentTimeValue = target?.getAttribute(CURRENT_TIME_PROPERTY);\n  const timeValue = target?.getAttribute(TIME_PROPERTY);\n\n  const currentTimeValueAsInt = parseInt(currentTimeValue);\n  const timeValueAsInt = parseInt(timeValue);\n\n  if (isNaN(currentTimeValueAsInt) || isNaN(timeValueAsInt)) return;\n\n  const percentToEnd = Math.floor(\n    (currentTimeValueAsInt * 100) / timeValueAsInt\n  );\n  const pageHeight = document.body.scrollHeight;\n  const newHeight = Math.floor(pageHeight - (pageHeight * percentToEnd) / 100);\n\n  backgroundTimer.style.bottom = `${newHeight}px`;\n};\n\nwindow.onload = function () {\n  const main = document.getElementById('main');\n  const timer = document.getElementById('timer');\n  const timers = document.getElementById('timers');\n\n  if (!timer || !timers) return;\n\n  for (const intTimer of DEFAULT_TIMERS) {\n    const li = document.createElement('li');\n    const span = document.createElement('span');\n    const { hour, minute, second } = getTime(intTimer);\n\n    const applyNewTimer = () => {\n      const intervalId = timer.getAttribute(INTERVAL_ID_PROPERTY);\n\n      timer.dispatchEvent(\n        newEventStartTimer({\n          timer: intTimer,\n          intervalId,\n        })\n      );\n\n      main.style.backgroundColor = getDarkColor();\n    };\n\n    span.innerHTML = `${hour}:${minute}:${second}`;\n    li.appendChild(span);\n    li.addEventListener('click', applyNewTimer);\n\n    timers.appendChild(li);\n  }\n\n  timer.addEventListener(CUSTOM_EVENTS.START_TIMER, handleStartTimer);\n  timer.addEventListener('click', handleStopTimer);\n\n  const observer = new MutationObserver(onTimerChange);\n  observer.observe(timer, { attributes: true });\n};\n"],"names":["$0549f5aaef62b2d2$export$6879ea1c217f4705","$0549f5aaef62b2d2$export$f4aba04677f37907","$0549f5aaef62b2d2$export$6502bacdb98f76fe","$0549f5aaef62b2d2$export$7ff69bf5c61582bf","START_TIMER","STOP_TIMER","$0549f5aaef62b2d2$export$9ebc6c441d49d049","$0549f5aaef62b2d2$export$a591d66724dbb1d6","$0549f5aaef62b2d2$export$d3b58c375c12d37c","$55e824ff15c161b3$export$f7e13749bade1ef7","color","i","Math","floor","random","pow","toString","slice","$364456af99437784$var$getDateInstance","d","Date","timezoneOffset","getTimezoneOffset","getTime","$364456af99437784$var$getTime","time","setMilliseconds","isoStringTimer","toISOString","_","year","month","day","hour","minute","second","match","$364456af99437784$var$clear","intervalId","el","id","parseInt","clearInterval","removeAttribute","$364456af99437784$var$startTimer","target","skipSetTime","setAttribute","base","setInterval","newTime","setTime","innerHTML","$364456af99437784$var$handleStartTimer","event","timeFromEl","detail","timer","this","$364456af99437784$var$handleStopTimer","intervalIdFromEl","getAttribute","currentTime","isNaN","$364456af99437784$var$onTimerChange","mutations","backgroundTimer","document","getElementById","timeNode","find","m","attributeName","currentTimeValue","timeValue","currentTimeValueAsInt","timeValueAsInt","percentToEnd","pageHeight","body","scrollHeight","newHeight","style","bottom","window","onload","main","timers","intTimer","li","createElement","span","applyNewTimer","dispatchEvent","CustomEvent","backgroundColor","appendChild","addEventListener","MutationObserver","observe","attributes"],"version":3,"file":"index.e4ef606e.js.map"}